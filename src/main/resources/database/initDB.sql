DROP TABLE user_roles IF EXISTS;
DROP TABLE votes IF EXISTS;
DROP TABLE foods IF EXISTS;
DROP TABLE users IF EXISTS;
DROP TABLE restaurants IF EXISTS;
DROP SEQUENCE global_seq IF EXISTS;

CREATE SEQUENCE GLOBAL_SEQ AS INTEGER START WITH 100000;

CREATE TABLE users(
  id            INTEGER GENERATED BY DEFAULT AS SEQUENCE GLOBAL_SEQ PRIMARY KEY,
  name          VARCHAR(255) NOT NULL,
  email         VARCHAR(255) NOT NULL,
  password      VARCHAR(255) NOT NULL,
  registered    TIMESTAMP,
  enabled       BOOLEAN DEFAULT TRUE,
  CONSTRAINT users_unique_email_idx UNIQUE (email)
);

CREATE TABLE user_roles(
  user_id       INTEGER NOT NULL,
  role          VARCHAR(255),
  CONSTRAINT user_roles_idx UNIQUE (user_id,role),
  FOREIGN KEY (user_id) REFERENCES USERS (id) ON DELETE CASCADE
);

CREATE TABLE restaurants(
  id            INTEGER GENERATED BY DEFAULT AS SEQUENCE GLOBAL_SEQ PRIMARY KEY,
  name          VARCHAR(255) NOT NULL,
  description   VARCHAR(255) NOT NULL
);

CREATE TABLE votes(
  id            INTEGER GENERATED BY DEFAULT AS SEQUENCE GLOBAL_SEQ PRIMARY KEY,
  user_id       INTEGER NOT NULL,
  restaurant_id INTEGER NOT NULL,
  date          DATE NOT NULL,
  CONSTRAINT user_date_unique_idx UNIQUE (user_id, date),
  FOREIGN KEY (restaurant_id) REFERENCES restaurants (id) ON DELETE CASCADE,
  FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE
);

CREATE TABLE foods(
  id            INTEGER GENERATED BY DEFAULT AS SEQUENCE GLOBAL_SEQ PRIMARY KEY,
  restaurant_id INTEGER NOT NULL,
  date          DATE NOT NULL,
  name          VARCHAR(255) NOT NULL,
  price         INT DEFAULT 0,
  CONSTRAINT foods_unique_idx UNIQUE (restaurant_id, date, name, price),
  FOREIGN KEY (restaurant_id) REFERENCES restaurants (id) ON DELETE CASCADE
);

CREATE INDEX fki_dishes_rest ON foods (restaurant_id);
CREATE INDEX fki_votes_rest ON votes (restaurant_id);
CREATE INDEX fki_votes_user ON votes (user_id);